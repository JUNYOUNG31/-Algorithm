# 상근이는 트럭을 가지고 긴 일직선 도로를 운전하고 있다. 도로에는 신호등이 설치되어 있다. 
# 상근이는 각 신호등에 대해서 빨간 불이 지속되는 시간과 초록 불이 지속되는 시간을 미리 구해왔다.
# (빨강색과 초록색 불빛은 무한히 반복된다)
# 상근이의 트럭이 도로에 진입했을 때, 모든 신호등의 색상은 빨간색이고, 
# 사이클이 막 시작한 상태이다. 상근이는 1초에 1미터를 움직인다.
# 신호등의 색상이 빨간색인 경우에는 그 자리에서 멈추고 초록색으로 바뀔때 까지 기다린다.
# 상근이가 도로의 끝까지 이동하는데 걸리는 시간을 구하는 프로그램을 작성하시오.
# 도로의 시작은 0미터이고, 끝은 L미터인 지점이다.

# 첫째 줄에 신호등의 개수 N과 도로의 길이 L이 주어진다. (1 ≤ N ≤ 100, 1 ≤ L ≤ 1000)
# 다음 N개 줄에는 각 신호등의 정보 D, R, G가 주어진다. (1 ≤ D < L, 1 ≤ R ≤ 100, 1 ≤ G ≤ 100)
#  D는 신호등의 위치이며, R과 G는 빨간색, 초록색이 지속되는 시간이다.
# 신호등은 D가 증가하는 순서로 주어지며, 같은 위치에 있는 신호등이 두 개 이상 있는 경우는 없다.

N , L = map(int, input().split())              # N : 신호등 개수 L : 도로의 길이
list_Traffic_Light=[]                          #  신호등 리스트 변수
D,R,G=[],[],[]                                 # 거리 ,빨간색지속시간, 초록색지속시간,
time = 0                                       # 시간 변수
distance = 0                                          # 거리 변수
for _ in range(N):                             # 신호등의 개수
    Traffic_Light = list(map(int, input().split()))  # 리스트화
    list_Traffic_Light+=[Traffic_Light]        # 리스트화
for i in list_Traffic_Light:               # 리스트화
    D.append(i[0])                         # 거리만의 리스트
    R.append(i[1])                         # 빨간불의 지속시간의 리스트
    G.append(i[2])                         # 초록불의 지속시간의 리스트

while distance !=L: 
    time += 1                   # 시간이 1 초씩 증가
    distance +=1                # 거리가 1씩 증가
    for n in range(N):          # 거리의 길이만큼 반복                
        if distance == D[n]:    # 거리 신호등의 거리와 같을때
            if time%(R[n]+G[n]) < R[n] :     # 시간이 빨간불의 신호보다 작을때
                time += R[n] - time%(R[n]+G[n])

print(time)                     # 시간 출력