# 서강대학교 곤자가 기숙사의 지하에는 n개의 방이 일렬로 늘어선 감옥이 있다. 각 방에는 벌점을 많이 받은 학생이 구금되어있다.
# 그러던 어느 날, 감옥 간수인 상범이는 지루한 나머지 정신나간 게임을 하기로 결정했다.
# 게임의 첫 번째 라운드에서 상범이는 위스키를 한 잔 들이키고, 달려가며 감옥을 한 개씩 모두 연다.
# 그 다음 라운드에서는 2, 4, 6, ... 번 방을 다시 잠그고, 세 번째 라운드에서는 3, 6, 9, ... 번 방이 열려있으면 잠그고,
# 잠겨있다면 연다. k번째 라운드에서는 번호가 k의 배수인 방이 열려 있으면 잠그고, 잠겨 있다면 연다.
# 이렇게 n번째 라운드까지 진행한 이후, 상범이는 위스키의 마지막 병을 마시고 쓰러져 잠든다.
# 구금되어있는 몇 명(어쩌면 0명)의 학생들은 자신의 방을 잠그지 않은 채 상범이가 쓰러져버렸단 것을 깨닫고 즉시 도망친다.
# 방의 개수가 주어졌을 때, 몇 명의 학생들이 도주할 수 있는지 알아보자.

#입력의 첫 번째 줄에는 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄에 한 개씩 방의 개수 n(5 ≤ n ≤ 100)이 주어진다.
# def solve():
#   배열 result.fill(false)
#   1 부터 n 까지의 i에서:
#     i의 배수에 해당하는 result[i*a]는 반전

# 끝나고 result에서 트루개수 출력
# 초반은 일단 설명나온 그대로 짜보셈
# 타임리밋 빡시게 걸린거 없으니까
# 그대로짜고 논리맞는지 확인

# False : 닫힘 # True : 열림
T = int(input())                 # 반복 할 스테이지
room =[]                         # 방의 리스트
for t in range(T):           # 스테이지 반복
    n = int(input())             # n : 방의 개수, 반복할 횟수
    room = [False]*(n+1)         # n 만큼 방을만들고 방을 닫는 초기상태로 만든다
                                 # 인덱스를 1부터 처리하기위해서 n+1로 만들고
                                 # 인덱스 0은 닫힌상태로 둔다.
    for i in range(1,n+1):       # 1부터 n 까지 반복
        for j in range(i,n+1,i): # i의 배수만큼 증가            
            room[j]= not room[j]
            

    print(room.count(True))      # 열린 수만큼 출력
